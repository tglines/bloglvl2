module.exports={
  "/posts/startup-fundamentals-lessons-learned-the-hard-way": {
    "title": "Startup Fundamentals: Lessons Learned the Hard Way",
    "topic": "Startups",
    "url": "/posts/startup-fundamentals-lessons-learned-the-hard-way",
    "author_name": "Travis Glines",
    "author_image": "https://graph.facebook.com/travisglines/picture",
    "date_published": "2011-10-06T21:25:33.295Z",
    "content": "h2 Startup Fundamentals: Lessons Learned the Hard Way\r\n\r\np During my high school years I played basketball. One thing that stuck with me more than anything from my experience was that the difference between teams that won and teams that lost was fundamentals. Coach Howard would tell us day in and day out that taking care of the ball, reducing turnovers, making free throws, getting the ball inside, playing solid defense and controlling the pace of the game were all essential. It finally paid off when we made it to the championship game in my senior year.\r\n\r\np What does this have to do with web startups you ask? Well, since that time in pretty much any competitive game, I’ve noticed that there are a few key focus areas that separate winning teams from loosing teams. You can grade a team based on these things and predict very well how they would do. After spending the last few months working on a web startup, I’d like to share the things I learned first hand and the fundamentals that governed the game. Please excuse my naivety if this post seems obvious, or overgeneralizing to you as I sure didn’t know these things well enough going into the process and had I read this post I may have been that little bit more effective. Hopefully it’ll help someone else out there trying to do the same.\r\n\r\np The three fundamentals I found were the Idea, Traction and Technical Execution. Each of these has equal weight. Now let me go much deeper into each of these to explain why they’re important, what I really mean by each and more specific details.\r\n\r\nh3 Idea\r\n\r\np The idea is essential to the business, however commonly too heavily relied upon as someone thinking they can have a great product. The idea for me, is more encompassing than the typical “I have a business idea!” with no more further thought. It includes things that people like Paul Graham would ask you: “How big is the possible addressable market? Who are your competitors? How will you make money? Does it fix a need or problem people have? What’s new about your idea?” This is where the Lean Startup movement really shines because basically you quickly pivot until you find an idea that works. You define an idea that works by one that finds traction readily available. The better the idea the easier the traction will be to aquire.\r\n\r\nh3 Technical Execution\r\n\r\np Can your team sustainably put together a solid product and iterate? If you’re going to compete in a red hot market like web startups you need to have the chops to code a product quickly and iterate on it to improve it. In some rare cases technical execution can be nearly all you need; These are typically areas that are on the edge of what is possible technically, where the idea is more obvious and can provide first mover advantage if executed.\r\n\r\np Technical execution is everything from design to site speed. Its the quality of the product you have produced. If you’re Zappos its customer service, if you’re Netflix its streaming bandwidth and if you’re TechCrunch its the quality and relevance of your posts. I say sustainably because writing good code is only a small piece of pulling a product off. You need to be able to have a nice work environment and work together as a team. Politics and disgruntled team members will distract you into ruins unless you’re vigilant.\r\n\r\nh3 Traction\r\n\r\np More precisely the ability to gain traction. This was one of the realizations that hit home the hardest: you can build the best product in the world, that everyone wants and still fail. Relevant people need to hear about it. Good startups will have a plan (not “Well, we’ll just post it on HackerNews”) for getting people to actually start using and continue using their product. I feel like most web startups these days fail, not because the idea sucked or the team made a bad product … but because no one ever heard about it.\r\n\r\nh3 Some Examples:\r\n\r\np Google stole market share from Lycos, Yahoo!, Excite, AskJeeves and the like through having better search results. Their superior PageRank algorithim drove traction through an established business/product model.\r\n\r\np Facebook seems like traction wizardry to me. It came into a market already dominated my MySpace. However going after college students first and starting in the best place to do that (Boston, MA is probably the best/largest college “town” in the world) was a brilliant circumstance that I think led to its success over MySpace. College students share things … fast, and have enough time/willingness to try them out.\r\n\r\nh3 TLDR;\r\n\r\np Startups need to focus on one question: Are you building something well, that people want, will pay for and will somehow hear about?\r\n\r\np Lacking in any one of these areas can kill off your startup entirely. Most startups need to beat their competition in all three fundamentals and blow them away in one.\r\n\r\ndiv\r\n  span Discussion on HackerNews: \r\n  a.external(href='http://news.ycombinator.com/item?id=2530902')  http://news.ycombinator.com/item?id=2530902"
  },
  "/posts/webgl-node-js-websockets-a-web-technology-perfect-storm": {
    "title": "WebGL + Node.js + WebSockets = A Web Technology Perfect Storm",
    "topic": "NodeJS",
    "url": "/posts/webgl-node-js-websockets-a-web-technology-perfect-storm",
    "author_name": "Travis Glines",
    "author_image": "https://graph.facebook.com/travisglines/picture",
    "date_published": "2011-10-06T21:29:51.311Z",
    "content": "h2 WebGL + Node.js + WebSockets = A Web Technology Perfect Storm\r\n\r\np Over the past few months a few things have become extremely clear to me: web technologies are exploding and the capabilities for software on the web is soon to meet that of desktop software if innovation continues along this path.\r\n\r\np The web technologies I’m talking about are webGL, websockets and node.js. WebGL enables web developers to utilize many of OpenGL’s features inside a web browser and bring 3D applications to the web. Websockets allow a client to communicate with a server with significantly less overhead than ajax, making real time applications on the web much more doable. Node.js allows the server to salably handle all these websocket connections. The real kicker is that they’re all coming to maturity at the same time and cater to each other in a huge way.\r\n\r\np When you think of 3D on the web, you typically think of games first. Games in 3D are fun, but what if you could do multiplayer gaming inside a web browser, with a server that could scale? This is a reality that I think is now upon us and on a night before YCombinator starts announcing who gets into their summer program and developers are showing off their apps, I’d like to share with you a simple app I made to demonstrate what I mean. I made a simple chat application using the above technology stack (and others: socket.io, now.js, three.js). Keep in mind its mostly just a proof of concept, I wrote it in a few hours and is very primitive.\r\n\r\np I personally can’t wait for 3D to come to the web (hopefully its in the form of WebGL instead of Adobe’s Molehill) and think its just a matter of time until it happens. One of the things that people are instantly going to want to do is interact. In 3 dimensions that means sharing 3 position variables, chat and actions all in real time. Luckily enough node.js came along just in time to make the process nearly trivial and in 57 lines of server side code I can share 3 position variables and let users chat with each other. The individual pieces are themselves very cool, but with all of these technologies coming to maturity at roughly the same time the opportunities and possibilities are huge. Things like a web based MMO game, 3D shopping with friends in realtime (something I’d like to pursue here soon if we don’t get accepted to YC) and more are all possible at this point.\r\n\r\np Whenever new technologies or server stacks come out, it seems there is always a company that succeeds and champions the tech. I look forward to what comes out of these technologies in the next few years and am excited for the company that gets it right."
  },
  "/posts/what-its-like-building-a-real-website-in-node-js": {
    "title": "What it’s like building a real website in Node.js",
    "topic": "NodeJS",
    "url": "/posts/what-its-like-building-a-real-website-in-node-js",
    "author_name": "Travis Glines",
    "author_image": "https://graph.facebook.com/travisglines/picture",
    "date_published": "2011-10-06T21:35:42.291Z",
    "content": "h2 What it's like building a real website in Node.js\r\n\r\np It seems more and more so that people are interested in building their applications in node.js yet there are few reviews on what it’s actually like to work with the framework. I’ve designed and am nearly finished building out all of the features of a full scale (user accounts etc) social news site in node. (www.exipe.com) Here are a few of the things I’ve found and maybe they can help you in your decision to go with node. I will choose to ignore the thing that people point to first: because its event oriented it can handle more concurrent users better. Lets assume that as true and talk about some things that less people are talking about.\r\n\r\nol\r\n  li\r\n    strong There’s a steep asynchronus learning curve\r\n    p Even though I’ve made many a javascript application before working on this project, including fooling around in node some, I found adapting to the asynchronous programming style a significant challenge. Every database interaction you do, every file system read or write, even http requests are asynchronous and need callbacks. This means that quite often if you want to do 10 different things for example you can end up with spaghetti code with 10 different scoping levels of indentation. As you learn and grow with the tools in node you learn that you can attach listeners to things and create separate functions to mitigate these problems and shortly after it almost feels natural.\r\n\r\n  li\r\n    strong The Node.js project and its libraries move fast, and you have to keep up\r\n    p As many of you know node is a very new open source framework that has undergone many changes (some of which can break things) in the last few months. (since I started working with it on Exipe) This meant that I needed to be careful to notice what changed in the update and make sure I fixed anything that broke when updating. Some would ask “why don’t you just use the old version?” My response to that is the bug fixes and improvements are well worth the small changes in node. Another thing that happens is libraries such as mongoose (which we have been using to interact with our MongoDB database) undergo many changes as well. If I had any advice to give here it would be keep up with the latest going on in node and the packages/libraries you use because if you fall behind there may be no one willing to support an older version.\r\n\r\n  li\r\n    strong The community support is amazing and very active\r\n    p Like many programmers I frequent sites like github, google groups and stackoverflow. Upon asking questions, posting comments or sharing bugs about anything node related on those sites I’ve found a response that was fast, cordial and most importantly … correct. This has made any headaches in dealing with such a new framework relatively painless because so many others are going through or working on the same issues. I think I even heard that the node github page is more active than the rails project page.\r\n\r\n  li\r\n    strong Some of the libraries can save you a ton of time\r\n    p I found that one of the features I wanted in the site was a facebook login. While I’ve previously dealt with facebook connect in php and found it relatively painless there I expected something like that might be a headache in node. After finding the connect-auth library it turned into a piece of cake with a little monkey see monkey do thrown in from following the examples. I wanted to interact with S3 to store images and found a wonderful project called knox. Pretty much anything you can think of theres probably a tool that integrates with node that is of high quality and actively developed.\r\n\r\n  li\r\n    strong Server stuff is often easier to handle\r\n    p Working on php applications I often remember having to learn the black magic of configuring apache to do what I wanted. While not rocket science it seemed to be overly difficult and finding easy to understand, accurate documentation was hard. In node, if you use it as the server things like changing the port you’re hosting it on is as easy as changing which number you tell it to listen on. (these things are often/can be internal to node)\r\n\r\n  li\r\n    strong You can “cut corners” on requests easier\r\n    p It is fairly trivial to tell node to return a web request (say a user voting on a link) before interacting with the database, thus minimizing the time that the user is waiting for feedback. While I never got deep enough on a big project to want to do this with php, I’m not sure of how to do it off the top of my head.\r\n\r\n  li\r\n    strong Interacting with other websites is simple\r\n    p Telling your webserver to go out, download a web page, parse it and return something of significance to you is very easy in node. Something I have found more challenging in other languages and frameworks. (while possible and very doable they don’t support it so directly as node does)\r\n\r\n  li \r\n    strong You can MVC all you want\r\n    p In one of my previous posts I talk about a simple MVC setup with node.js. Similar to frameworks in other languages it is not only possible, but easy to set up and powerful\r\n\r\n  li\r\n    strong NPM is awesome\r\n    p If you want to install/update any of the packages you are using for node it is always very easy to do so with a tool like NPM. A simple npm install whatever_package and bingo you have it, ready to go.\r\n\r\np Hopefully this post has convinced some people to try out node for its active community/powerful tools and dissuaded some not intent on the extra learning/maintenance because that’s what I’ve found you’re probably in for. Whether node.js is the choice for you or not, I’ve found that the pros outweigh the cons in development of exipe and have loved working with the framework. Shameless plug: If you feel like checking out what a node.js website feels like head over to www.exipe.com and sign up for our beta coming in March.\r\n\r\np For those of you from HackerNews waiting for me to open source the more specific/thorough example of a node MVC setup, worry not as its nearly done and I’ll share it soon"
  },
  "/posts/about": {
    "title": "About",
    "topic": "Site",
    "url": "/posts/about",
    "author_name": "Travis Glines",
    "author_image": "",
    "date_published": "2011-10-06T22:23:43.342Z",
    "content": "h2 About\r\np In a previous life I pursued interests in Physics including starting work with high performance simulations of systems.  I've since jumped the academia ship in favor of the startup life.\r\n\r\np I've recently moved to LA to work on a social ecommerce startup using many of the latest web technologies."
  },
  "/posts/bookmarks": {
    "title": "Bookmarks",
    "topic": "Site",
    "url": "/posts/bookmarks",
    "author_name": "Travis Glines",
    "author_image": "",
    "date_published": "2011-10-06T22:29:54.627Z",
    "content": "h2 Bookmarks\r\n\r\ndiv\r\n  a.external(href='http://www.google.com') http://www.google.com"
  },
  "/posts/bloglvl2": {
    "title": "Blog lvl 2",
    "topic": "NodeJS",
    "url": "/posts/bloglvl2",
    "author_name": "Travis Glines",
    "author_image": "",
    "date_published": "2011-10-07T00:27:21.370Z",
    "content": "h2 Blog lvl 2\r\n\r\nh3 Show and Tell: A Different Look At A Blog\r\n\r\nh3 Features:  (Excuse my obsession with lists)\r\n\r\nul\r\n  li Socket.io + HTML5 Web History API falling back to default HTTP routes\r\n  li CSS3 3D transforms for page transitions\r\n  li Git integration w/ Coffeescript + Nodemon\r\n  li NoDB™ \r\n  li Editing posts with Jade\r\n\r\nh3 Code\r\n  div\r\n    a.external(href='https://github.com/tglines/blog-lvl-2') https://github.com/tglines/blog-lvl-2\r\n\r\nh3 Socket.io + HTML5 Web History API falling back to default HTTP routes\r\n\r\nul\r\n  li Combination of Socket.io + HTML5 web history api allows you to load the page via the socket.io transport, in many cases websockets.  This means less data transferred and faster pageloads. \r\n  li With the approach I've taken it will detect whether the web history api is available via Modernizr and falls back to standard HTTP requests.\r\n  li If the user loads a page from google (important for SEO) or doesn't have web history the page is rendered the exact same by dual routes in the back end.\r\n  li Gives you an opportunity to do some cool effects between pages\r\n\r\nh3 CSS3 3D transforms for page transitions\r\nul\r\n  li On the later builds of webkit (safari/chrome) there are some really cool CSS3 transitions now available\r\n  li What you see here is 2 sides of a 3d cube, with the four other sides absent\r\n  li However there are still some issues getting links/text interactive when the plane isn't initially perpendicular to the screen\r\n\r\nh3 Git integration w/ Coffeescript + Nodemon\r\nul\r\n  li Nodemon monitors files in a directory to look for changes\r\n  li Upon changes it will restart the server (using the new code)\r\n  li Easier to run coffeescript (it compiles it to js for you automatically, then runs it ... w/o ever showing you the js files)\r\n  li Using github's post receive functionality:\r\n    ul\r\n      li Commit code from local machine to github\r\n      li Github sends post receive http message to server\r\n      li Server runs a git pull\r\n      li Nodemon sees the new files and restarts the server\r\n      li Therefor just by committing to github, website will restart automatically with new code\r\n      li Good for dev environments (probably don't want to do this in production w/o automated rollback strategy in place)\r\n\r\nh3 NoDB™\r\nul\r\n  li No database\r\n  li Instead requiring JSON from the filesystem\r\n  li Allows posts to be kept in git\r\n  li Unlike PHP and a few other threaded systems it's easy to set up a boot sequence to a node instance\r\n  li Pull in post object into memory, serve it from there\r\n  li Upon edits write it out to file and push to github\r\n\r\nh3 Editing posts with Jade\r\nul\r\n  li Allows for easy to read markup\r\n  li Still have the full power of raw html\r\n  li Can easily render views the same in socket.io or HTTP\r\n\r\nh3 Questions?\r\n\r\nh3 Next Steps\r\nul\r\n  li Wrap up a few things including auth/comments\r\n  li Open source it\r\n  li Follow twitter @travisglines for updates and look for it on HN sometime soon"
  }
}